'use client'

import { useState } from 'react'

interface StatusGeneratorProps {
  files: File[]
  fileTree: string
}

export default function StatusGenerator({ files, fileTree }: StatusGeneratorProps) {
  const [projectName, setProjectName] = useState('My Project')
  const [projectDescription, setProjectDescription] = useState('')
  const [generatedStatus, setGeneratedStatus] = useState('')
  const [copied, setCopied] = useState(false)

  const generateStatus = () => {
    const date = new Date().toISOString().split('T')[0]
    const totalSize = files.reduce((acc, file) => acc + file.size, 0)
    
    const status = `# ${projectName} - Project Status
*Generated: ${date} by ContextViber*

## 📋 Project Overview
${projectDescription || 'AI Context Management Tool for maintaining conversation continuity with AI assistants.'}

## 📊 Project Statistics
- **Total Files**: ${files.length}
- **Total Size**: ${(totalSize / 1024).toFixed(2)} KB
- **Last Updated**: ${date}

## 📁 Project Structure
\`\`\`
${fileTree || 'No file tree generated yet'}
\`\`\`

## 🚀 Quick Start
1. Clone the repository
2. Install dependencies: \`npm install\`
3. Run development server: \`npm run dev\`
4. Open browser at \`http://localhost:3000\`

## 🔧 Technologies Used
- Framework: Next.js 14
- Language: TypeScript
- Styling: Tailwind CSS
- State: React Hooks

## ✅ Recent Changes
- [ ] Initial project setup
- [ ] File upload functionality
- [ ] Token counting implementation
- [ ] Status generator created

## 🎯 Next Steps
- [ ] Implement AI integration
- [ ] Add export functionality
- [ ] Create user authentication
- [ ] Deploy to production

## 📝 Notes
This status document was automatically generated by ContextViber.
Update this document regularly to maintain project context across AI conversations.

---
*Powered by [ContextViber](https://contextviber.com)*`

    setGeneratedStatus(status)
  }

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedStatus)
    setCopied(true)
    setTimeout(() => setCopied(false), 2000)
  }

  const downloadMarkdown = () => {
    const blob = new Blob([generatedStatus], { type: 'text/markdown' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = 'status.md'
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div>
      {/* Input Fields */}
      <div className="space-y-4 mb-6">
        <div>
          <label className="block text-gray-300 text-sm mb-2">Project Name</label>
          <input
            type="text"
            value={projectName}
            onChange={(e) => setProjectName(e.target.value)}
            className="w-full px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-500 focus:border-purple-500 focus:outline-none"
            placeholder="Enter project name"
          />
        </div>
        
        <div>
          <label className="block text-gray-300 text-sm mb-2">Project Description</label>
          <textarea
            value={projectDescription}
            onChange={(e) => setProjectDescription(e.target.value)}
            className="w-full px-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-500 focus:border-purple-500 focus:outline-none h-24 resize-none"
            placeholder="Describe your project..."
          />
        </div>
      </div>

      {/* Generate Button */}
      <button
        onClick={generateStatus}
        disabled={files.length === 0}
        className={`w-full py-3 rounded-lg font-medium transition mb-6 ${
          files.length === 0
            ? 'bg-gray-700 text-gray-400 cursor-not-allowed'
            : 'bg-gradient-to-r from-purple-500 to-pink-500 text-white hover:shadow-lg hover:shadow-purple-500/25'
        }`}
      >
        {files.length === 0 ? 'Upload files first' : '🚀 Generate Status.md'}
      </button>

      {/* Generated Content */}
      {generatedStatus && (
        <div>
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-white">Generated Status</h3>
            <div className="flex gap-2">
              <button
                onClick={copyToClipboard}
                className={`px-4 py-2 rounded-lg transition ${
                  copied
                    ? 'bg-green-500/20 text-green-300'
                    : 'bg-purple-500/20 text-purple-300 hover:bg-purple-500/30'
                }`}
              >
                {copied ? '✓ Copied!' : '📋 Copy'}
              </button>
              <button
                onClick={downloadMarkdown}
                className="px-4 py-2 bg-purple-500/20 text-purple-300 rounded-lg hover:bg-purple-500/30 transition"
              >
                💾 Download
              </button>
            </div>
          </div>
          
          <div className="bg-black/30 rounded-lg p-4 max-h-96 overflow-y-auto">
            <pre className="text-gray-300 font-mono text-sm whitespace-pre-wrap">
              {generatedStatus}
            </pre>
          </div>
        </div>
      )}

      {/* Template Options */}
      <div className="mt-6 p-4 bg-gradient-to-r from-purple-900/30 to-pink-900/30 border border-purple-500/20 rounded-lg">
        <h4 className="text-white font-medium mb-3">📄 Template Options</h4>
        <div className="grid grid-cols-2 gap-3">
          <button className="px-3 py-2 bg-white/10 text-gray-300 rounded hover:bg-white/20 transition text-sm">
            Basic Template
          </button>
          <button className="px-3 py-2 bg-white/10 text-gray-300 rounded hover:bg-white/20 transition text-sm">
            Detailed Template
          </button>
          <button className="px-3 py-2 bg-white/10 text-gray-300 rounded hover:bg-white/20 transition text-sm">
            Agile Sprint
          </button>
          <button className="px-3 py-2 bg-white/10 text-gray-300 rounded hover:bg-white/20 transition text-sm">
            Bug Report
          </button>
        </div>
      </div>
    </div>
  )
}